{
  "pipeline": "alternative_3_stage",
  "stage": 3,
  "stage_name": "JSON Engineer",
  "timestamp": "20250723_194009",
  "content": "```javascript\n// DESIGN_SYSTEM_DATA is assumed to be globally available and contains the design system component definitions.  Example structure shown below.  Replace with your actual data.\n\nconst DESIGN_SYSTEM_DATA = [\n  { id: \"comp1\", textLayers: [\"Default\"], suggestedType: \"Button\"},\n  { id: \"comp2\", textHierarchy: [{ nodeName: \"placeholder-text\" }, { nodeName: \"label-text\" }], type: \"TextInput\"},\n  { id: \"comp3\", properties: { text: { primaryLabel: {}, secondaryText: {} } }, type: \"Card\"},\n  { id: \"comp4\", slots: { buttonText: { type: \"text\" }, iconLabel: { type: \"text\" } }, type: \"IconButton\"},\n  { id: \"comp5\", textNodes: [{ name: \"headline\" }, { name: \"body\" }], type: \"Article\"},\n  {id: \"comp6\", properties: { title: {}, description: {}}, type: \"Section\"} //Example of a component without explicit \"text\" in properties.\n];\n\n\nfunction extractTextProperties(schema) {\n  // ... (Identical to the provided extractTextProperties function) ...\n}\n\nfunction mapUserIntentToSchemaProperties(userTextData, availableSchemaProperties) {\n  // ... (Identical to the provided mapUserIntentToSchemaProperties function) ...\n}\n\nfunction findBestPropertyMatch(userKey, schemaProperties, semanticCategories) {\n  // ... (Identical to the provided findBestPropertyMatch function) ...\n}\n\n\nfunction processComponentTextProperties(componentNodeId, userTextIntent) {\n  // Step 1: Get component schema\n  const componentSchema = DESIGN_SYSTEM_DATA.find(comp => comp.id === componentNodeId);\n\n  if (!componentSchema) {\n    console.error(`Component ${componentNodeId} not found`);\n    return {};\n  }\n\n  // Step 2: Extract available text properties from schema\n  const availableTextProperties = extractTextProperties(componentSchema);\n\n  if (availableTextProperties.length === 0) {\n    console.warn(`No text properties found for component ${componentNodeId}`);\n    return {\n      \"type\": componentSchema.suggestedType || componentSchema.type,\n      \"componentNodeId\": componentNodeId,\n      \"properties\": {} //Return empty properties if no text properties are found.\n    };\n  }\n\n  // Step 3: Map user intent to exact schema property names\n  const mappedProperties = mapUserIntentToSchemaProperties(userTextIntent, availableTextProperties);\n\n  // Step 4: Return properly formatted properties object\n  return {\n    \"type\": componentSchema.suggestedType || componentSchema.type,\n    \"componentNodeId\": componentNodeId,\n    \"properties\": mappedProperties\n  };\n}\n\n\n// Example Usage:\n\nconst userIntent1 = { \"text\": \"Sign In\" };\nconst result1 = processComponentTextProperties(\"comp1\", userIntent1);\nconsole.log(\"Result 1:\", result1); // Expected: {\"type\": \"Button\", \"componentNodeId\": \"comp1\", \"properties\": {\"Default\": \"Sign In\"}}\n\nconst userIntent2 = { \"placeholder\": \"Enter email\", \"label\": \"Email\" };\nconst result2 = processComponentTextProperties(\"comp2\", userIntent2);\nconsole.log(\"Result 2:\", result2); // Expected: {\"type\": \"TextInput\", \"componentNodeId\": \"comp2\", \"properties\": {\"placeholder-text\": \"Enter email\", \"label-text\": \"Email\"}}\n\nconst userIntent3 = { \"title\": \"Settings\", \"subtitle\": \"Manage your account\" };\nconst result3 = processComponentTextProperties(\"comp3\", userIntent3);\nconsole.log(\"Result 3:\", result3); // Expected: {\"type\": \"Card\", \"componentNodeId\": \"comp3\", \"properties\": {\"primaryLabel\": \"Settings\", \"secondaryText\": \"Manage your account\"}}\n\nconst userIntent4 = { \"action\": \"Save\" };\nconst result4 = processComponentTextProperties(\"comp4\", userIntent4);\nconsole.log(\"Result 4:\", result4); // Expected: {\"type\": \"IconButton\", \"componentNodeId\": \"comp4\", \"properties\": {\"buttonText\": \"Save\"}}\n\nconst userIntent5 = { \"headline\": \"My Article\", \"body\": \"This is the content.\"};\nconst result5 = processComponentTextProperties(\"comp5\", userIntent5);\nconsole.log(\"Result 5:\", result5); //Expected: {\"type\": \"Article\", \"componentNodeId\": \"comp5\", \"properties\": {\"headline\": \"My Article\", \"body\": \"This is the content.\"}}\n\nconst userIntent6 = {\"title\": \"My Section\", \"description\": \"A description\"};\nconst result6 = processComponentTextProperties(\"comp6\", userIntent6);\nconsole.log(\"Result 6:\", result6); //Expected: {\"type\": \"Section\", \"componentNodeId\": \"comp6\", \"properties\": {\"title\": \"My Section\", \"description\": \"A description\"}}\n\nconst userIntent7 = {\"wrongkey\": \"Some Text\"};\nconst result7 = processComponentTextProperties(\"comp6\", userIntent7);\nconsole.log(\"Result 7:\", result7); //Expected: {\"type\": \"Section\", \"componentNodeId\": \"comp6\", \"properties\": {\"title\": \"Some Text\"}}\n\n\nconst nonExistentComponent = processComponentTextProperties(\"nonExistent\", userIntent7);\nconsole.log(\"Result NonExistent:\", nonExistentComponent); //Expected: {} and a console error\n\n\n```",
  "metadata": {
    "stage": "JSON Engineer",
    "ai_used": true,
    "prompt_used": true,
    "prompt_length": 11594,
    "execution_time": 8.896509885787964,
    "token_usage": {
      "prompt_tokens": 953.0,
      "completion_tokens": 373.0,
      "total_tokens": 1326.0
    }
  }
}