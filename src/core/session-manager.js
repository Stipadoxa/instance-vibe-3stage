// session-manager.ts
// Session state management for AIDesigner
export class SessionManager {
    // –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞–Ω —Å–µ—Å—ñ—ó
    static async saveSession(designState, scanData) {
        try {
            const fileId = figma.root.id;
            const fileName = figma.root.name;
            // –Ø–∫—â–æ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ—ó —ñ—Ç–µ—Ä–∞—Ü—ñ—ó, –Ω–µ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
            if (!designState.isIterating)
                return;
            console.log(`üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó –¥–ª—è —Ñ–∞–π–ª—É: ${fileName}`);
            const storage = await this.getSessionStorage();
            const session = {
                fileId,
                fileName,
                lastModified: Date.now(),
                designState: {
                    original: designState.original,
                    current: designState.current,
                    history: [...designState.history],
                    frameId: designState.frameId,
                    frameName: designState.frameId ? await this.getFrameName(designState.frameId) : '',
                    isIterating: designState.isIterating
                },
                scanData
            };
            storage.sessions[fileId] = session;
            storage.lastActiveSession = fileId;
            await figma.clientStorage.setAsync(this.STORAGE_KEY, storage);
            console.log(`‚úÖ –°–µ—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞`);
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó:', error);
        }
    }
    // –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–µ—Å—ñ—é –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ñ–∞–π–ª—É
    static async loadSession() {
        try {
            const fileId = figma.root.id;
            const storage = await this.getSessionStorage();
            const session = storage.sessions[fileId];
            if (!session)
                return null;
            // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —ñ—Å–Ω—É—î —â–µ —Ñ—Ä–µ–π–º
            if (session.designState.frameId) {
                const frame = await figma.getNodeByIdAsync(session.designState.frameId);
                if (!frame || frame.removed) {
                    console.log('‚ö†Ô∏è –§—Ä–µ–π–º –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó —Å–µ—Å—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –æ—á–∏—â—É—î–º–æ —Å–µ—Å—ñ—é');
                    await this.clearSession(fileId);
                    return null;
                }
            }
            console.log(`‚úÖ –°–µ—Å—ñ—è –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª—É: ${session.fileName}`);
            return session;
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–µ—Å—ñ—ó:', error);
            return null;
        }
    }
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Å–µ—Å—ñ—ó
    static async getAllSessions() {
        try {
            const storage = await this.getSessionStorage();
            const now = Date.now();
            const activeSessions = Object.values(storage.sessions)
                .filter(session => (now - session.lastModified) < this.MAX_SESSION_AGE)
                .sort((a, b) => b.lastModified - a.lastModified);
            return activeSessions;
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Å–µ—Å—ñ–π:', error);
            return [];
        }
    }
    // –û—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Å—ñ—é –¥–ª—è —Ñ–∞–π–ª—É
    static async clearSession(fileId) {
        try {
            const targetFileId = fileId || figma.root.id;
            const storage = await this.getSessionStorage();
            delete storage.sessions[targetFileId];
            if (storage.lastActiveSession === targetFileId) {
                delete storage.lastActiveSession;
            }
            await figma.clientStorage.setAsync(this.STORAGE_KEY, storage);
            console.log(`üóëÔ∏è –°–µ—Å—ñ—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è —Ñ–∞–π–ª—É: ${targetFileId}`);
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å–µ—Å—ñ—ó:', error);
        }
    }
    // –û—á–∏—Å—Ç–∏—Ç–∏ —Å—Ç–∞—Ä—ñ —Å–µ—Å—ñ—ó
    static async cleanupOldSessions() {
        try {
            const storage = await this.getSessionStorage();
            const now = Date.now();
            let cleaned = 0;
            Object.entries(storage.sessions).forEach(([fileId, session]) => {
                if ((now - session.lastModified) > this.MAX_SESSION_AGE) {
                    delete storage.sessions[fileId];
                    cleaned++;
                }
            });
            if (cleaned > 0) {
                await figma.clientStorage.setAsync(this.STORAGE_KEY, storage);
                console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${cleaned} —Å—Ç–∞—Ä–∏—Ö —Å–µ—Å—ñ–π`);
            }
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Å–µ—Å—ñ–π:', error);
        }
    }
    // –û—Ç—Ä–∏–º–∞—Ç–∏ storage –∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—î—é
    static async getSessionStorage() {
        try {
            const storage = await figma.clientStorage.getAsync(this.STORAGE_KEY);
            if (!storage || storage.version !== this.SESSION_VERSION) {
                return {
                    sessions: {},
                    version: this.SESSION_VERSION
                };
            }
            return storage;
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è storage:', error);
            return {
                sessions: {},
                version: this.SESSION_VERSION
            };
        }
    }
    // –û—Ç—Ä–∏–º–∞—Ç–∏ –Ω–∞–∑–≤—É —Ñ—Ä–µ–π–º—É –∑–∞ ID
    static async getFrameName(frameId) {
        try {
            const frame = await figma.getNodeByIdAsync(frameId);
            return (frame === null || frame === void 0 ? void 0 : frame.name) || 'Unknown Frame';
        }
        catch (_a) {
            return 'Unknown Frame';
        }
    }
    // –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Å–µ—Å—ñ—é –∑ –¥–∞–Ω–∏—Ö
    static async restoreSessionData(sessionData) {
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ —ñ—Å–Ω—É—î —Ñ—Ä–µ–π–º
            if (sessionData.designState.frameId) {
                const frame = await figma.getNodeByIdAsync(sessionData.designState.frameId);
                if (!frame || frame.removed) {
                    throw new Error('–§—Ä–µ–π–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
                }
                // –ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ñ—Ä–µ–π–º—É
                figma.currentPage.selection = [frame];
                figma.viewport.scrollAndZoomIntoView([frame]);
            }
            return true;
        }
        catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–µ—Å—ñ—ó:', error);
            return false;
        }
    }
}
SessionManager.STORAGE_KEY = 'aidesigner-sessions';
SessionManager.SESSION_VERSION = '1.0';
SessionManager.MAX_SESSION_AGE = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω—ñ–≤
