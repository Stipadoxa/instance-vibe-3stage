#!/usr/bin/env python3
"""
–ë–∞–∑–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Design Reviewer —Å–∏—Å—Ç–µ–º–∏ –ë–ï–ó API –∫–ª—é—á—ñ–≤
"""

import os
import json
from pathlib import Path

def test_file_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—ñ–≤"""
    print("üìÅ –¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Ñ–∞–π–ª—ñ–≤:")
    
    base_path = Path("/Users/stipa/UXPal")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –∫–ª—é—á–æ–≤—ñ –ø–∞–ø–∫–∏
    tests = {
        "scripts/": base_path / "scripts",
        "python_outputs/": base_path / "python_outputs", 
        "screenshots/": base_path / "screenshots",
        "src/prompts/roles/reviewer.txt": base_path / "src/prompts/roles/reviewer.txt"
    }
    
    for name, path in tests.items():
        if path.exists():
            print(f"   ‚úÖ {name}")
        else:
            print(f"   ‚ùå {name} - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")

def test_context_loading():
    """–¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –±–µ–∑ API"""
    print("\nüìã –¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É:")
    
    # –Ü–º–ø–æ—Ä—Ç –±–µ–∑ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó API
    import sys
    sys.path.append('scripts')
    
    # –°—Ç–≤–æ—Ä–∏–º–æ mock –≤–µ—Ä—Å—ñ—é –∫–ª–∞—Å—É
    from design_reviewer import DesignReviewer
    
    # Mock init –±–µ–∑ API
    try:
        base_path = Path("/Users/stipa/UXPal")
        python_outputs_path = base_path / "python_outputs"
        
        # –ó–Ω–∞–π—Ç–∏ timestamp
        timestamp_files = list(python_outputs_path.glob("alt3_20250812_*"))
        if timestamp_files:
            # –í–∑—è—Ç–∏ –ø–µ—Ä—à–∏–π —Ñ–∞–π–ª —Ç–∞ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ timestamp
            first_file = timestamp_files[0].name
            # alt3_20250812_094750_1_user_request_analyzer.json -> 20250812_094750
            parts = first_file.split('_')
            if len(parts) >= 3:
                timestamp = f"{parts[1]}_{parts[2]}"
                print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ timestamp: {timestamp}")
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤
                expected_files = [
                    f"alt3_{timestamp}_1_user_request_analyzer_output.txt",
                    f"alt3_{timestamp}_2_ux_ui_designer_output.txt", 
                    f"alt3_{timestamp}_3_json_engineer.json"
                ]
                
                for filename in expected_files:
                    if (python_outputs_path / filename).exists():
                        print(f"   ‚úÖ {filename}")
                    else:
                        print(f"   ‚ùå {filename} - –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                        
                return timestamp
            else:
                print("   ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç timestamp")
        else:
            print("   ‚ùå Timestamp —Ñ–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ")
            
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    
    return None

def test_reviewer_prompt():
    """–¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è reviewer prompt"""
    print("\nüìù –¢–µ—Å—Ç reviewer prompt:")
    
    prompt_path = Path("/Users/stipa/UXPal/src/prompts/roles/reviewer.txt")
    
    try:
        if prompt_path.exists():
            content = prompt_path.read_text(encoding='utf-8')
            print(f"   ‚úÖ Prompt –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(content)} —Å–∏–º–≤–æ–ª—ñ–≤")
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö —Å–µ–∫—Ü—ñ–π
            key_sections = [
                "REVIEW CONTEXT",
                "CRITICAL ISSUES", 
                "OUTPUT FORMAT",
                "DESIGN REVIEW: APPROVED"
            ]
            
            for section in key_sections:
                if section in content:
                    print(f"   ‚úÖ –°–µ–∫—Ü—ñ—è '{section}' –ø—Ä–∏—Å—É—Ç–Ω—è")
                else:
                    print(f"   ‚ùå –°–µ–∫—Ü—ñ—è '{section}' –≤—ñ–¥—Å—É—Ç–Ω—è")
        else:
            print("   ‚ùå Reviewer prompt —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def test_cli_script():
    """–¢–µ—Å—Ç CLI —Å–∫—Ä–∏–ø—Ç–∞"""
    print("\nüñ•Ô∏è  –¢–µ—Å—Ç CLI —Å–∫—Ä–∏–ø—Ç–∞:")
    
    import subprocess
    import sys
    
    try:
        # –¢–µ—Å—Ç help
        result = subprocess.run([
            sys.executable, "scripts/run_review.py", "--help"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("   ‚úÖ CLI --help –ø—Ä–∞—Ü—é—î")
            # print("   üìÑ Help output:")
            # print("      " + result.stdout[:200] + "...")
        else:
            print(f"   ‚ùå CLI --help –ø–æ–º–∏–ª–∫–∞: {result.stderr}")
            
    except Exception as e:
        print(f"   ‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è CLI: {e}")

def test_screenshots():
    """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤"""
    print("\nüì∏ –¢–µ—Å—Ç —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤:")
    
    screenshots_path = Path("/Users/stipa/UXPal/screenshots")
    
    if screenshots_path.exists():
        screenshots = list(screenshots_path.glob("*.png")) + list(screenshots_path.glob("*.jpg"))
        print(f"   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ {len(screenshots)} —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤")
        
        for i, screenshot in enumerate(screenshots[:3]):  # –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–µ—Ä—à—ñ 3
            print(f"   üìÑ {screenshot.name}")
            
        if len(screenshots) > 3:
            print(f"   ... —Ç–∞ —â–µ {len(screenshots) - 3} —Ñ–∞–π–ª—ñ–≤")
    else:
        print("   ‚ùå –ü–∞–ø–∫–∞ screenshots –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")

def main():
    print("üß™ –ë–ê–ó–û–í–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø DESIGN REVIEWER –°–ò–°–¢–ï–ú–ò")
    print("=" * 50)
    
    test_file_structure()
    timestamp = test_context_loading() 
    test_reviewer_prompt()
    test_cli_script()
    test_screenshots()
    
    print("\n" + "=" * 50)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–£–í–ê–ù–ù–Ø:")
    
    if timestamp:
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑ timestamp: {timestamp}")
        print("\nüéØ –ù–ê–°–¢–£–ü–ù–Ü –ö–†–û–ö–ò:")
        print("1. –û—Ç—Ä–∏–º–∞–π—Ç–µ Gemini API key")
        print("2. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å: export GEMINI_API_KEY='your-key'")
        print(f"3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å: python scripts/run_review.py {timestamp} screenshot_file.png --verbose")
    else:
        print("‚ùå –ü–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–ø—Ä–∞–≤–∏—Ç–∏ –ø—Ä–æ–±–ª–µ–º–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤–Ω–∏–º —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è–º")

if __name__ == "__main__":
    main()