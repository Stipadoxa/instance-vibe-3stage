#!/usr/bin/env python3
"""
CLI —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫—É Design Review —Å–∏—Å—Ç–µ–º–∏ UXPal

–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:
    python run_review.py 20250812_143736 screenshot_20250812_143736.png
    python run_review.py 20250812_143736 screenshot_20250812_143736.png --verbose
    
–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –ø–∞–ø–∫—É –≤ python_outputs/ —Ç–∞ –∑–∞–ø—É—Å–∫–∞—î review.
"""

import sys
import os
from pathlib import Path
import argparse
from design_reviewer import DesignReviewer


def parse_arguments():
    """
    –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
    """
    parser = argparse.ArgumentParser(
        description="UXPal Design Review System - –í—ñ–∑—É–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –¥–∏–∑–∞–π–Ω—ñ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–∫–ª–∞–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:

  # –ë–∞–∑–æ–≤–∏–π review
  python run_review.py 20250812_143736 screenshot_20250812_143736.png
  
  # –ó –¥–µ—Ç–∞–ª—å–Ω–∏–º –≤–∏–≤–æ–¥–æ–º
  python run_review.py 20250812_143736 screenshot_20250812_143736.png --verbose
  
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ (—è–∫—â–æ —ñ–º'—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ)
  python run_review.py 20250812_143736

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª—ñ–≤:
  python_outputs/alt3_20250812_143736_*_*.json  <- –≤—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ
  screenshots/screenshot_20250812_143736.png    <- —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
  python_outputs/alt3_20250812_143736/stage4_reviewer.txt  <- —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        """
    )
    
    parser.add_argument(
        "timestamp", 
        help="Timestamp –ø–∞–ø–∫–∏ –≤ python_outputs (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20250812_143736)"
    )
    
    parser.add_argument(
        "screenshot", 
        nargs='?',  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä
        help="–Ü–º'—è —Ñ–∞–π–ª—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤ –ø–∞–ø—Ü—ñ screenshots (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: screenshot_20250812_143736.png)"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–î–µ—Ç–∞–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ –ø—Ä–æ—Ü–µ—Å—É"
    )
    
    parser.add_argument(
        "--api-key",
        help="Gemini API –∫–ª—é—á (—è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ –∑–º—ñ–Ω–Ω—É GEMINI_API_KEY)"
    )
    
    return parser.parse_args()


def find_screenshot_automatically(timestamp: str, screenshots_path: Path) -> str:
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –∑–∞ timestamp
    """
    possible_names = [
        f"screenshot_{timestamp}.png",
        f"screenshot_{timestamp}.jpg", 
        f"screenshot_{timestamp}.jpeg",
        f"{timestamp}.png",
        f"design_{timestamp}.png"
    ]
    
    for name in possible_names:
        if (screenshots_path / name).exists():
            return name
    
    # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ —Ç–æ—á–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å, —à—É–∫–∞—î–º–æ –∑–∞ —á–∞—Å—Ç–∫–æ–≤–∏–º –∑–±—ñ–≥–æ–º
    for screenshot_file in screenshots_path.glob("*"):
        if timestamp in screenshot_file.name:
            return screenshot_file.name
    
    return None


def print_header():
    """
    –í–∏–≤–µ—Å—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
    """
    print("\n" + "="*60)
    print("üé® UXPal Design Review System")
    print("   –í—ñ–∑—É–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –¥–∏–∑–∞–π–Ω—ñ–≤")
    print("="*60 + "\n")


def print_results(result: dict, verbose: bool = False):
    """
    –í–∏–≤–µ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ review
    """
    print("\n" + "-"*40)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò REVIEW")
    print("-"*40)
    
    status = result.get("status", "unknown")
    message = result.get("message", "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Å—É—Ç–Ω—î")
    
    if status == "approved":
        print("‚úÖ –°–•–í–ê–õ–ï–ù–û: –î–∏–∑–∞–π–Ω –ø—Ä–æ–π—à–æ–≤ —É—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏")
        print(f"   {message}")
        
    elif status == "improved":
        print("üîß –ü–û–ö–†–ê–©–ï–ù–û: –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏")
        print(f"   {message}")
        
        if verbose and result.get("raw_json_path"):
            print(f"üìÅ Raw Reviewer JSON: {result['raw_json_path']}")
        
        if result.get("figma_ready_path"):
            print(f"üéØ Ready for Figma: {result['figma_ready_path']}")
            
    elif status == "error":
        print("‚ùå –ü–û–ú–ò–õ–ö–ê:")
        print(f"   {message}")
        
    else:
        print("‚ùì –ù–ï–í–Ü–î–û–ú–ò–ô –°–¢–ê–¢–£–°:")
        print(f"   {message}")
    
    # –ó–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ —à–ª—è—Ö –¥–æ –∑–≤—ñ—Ç—É
    if result.get("report_path"):
        print(f"üìù –î–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç: {result['report_path']}")
    
    print("\n" + "="*60)


def main():
    """
    –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è CLI —Å–∫—Ä–∏–ø—Ç–∞
    """
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤
        args = parse_arguments()
        
        if args.verbose:
            print_header()
            print(f"üîç Timestamp: {args.timestamp}")
            if args.screenshot:
                print(f"üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç: {args.screenshot}")
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è reviewer
        try:
            api_key = args.api_key or os.getenv('GEMINI_API_KEY')
            reviewer = DesignReviewer(api_key=api_key)
            
            if args.verbose:
                print("‚úÖ DesignReviewer —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
                
        except ValueError as e:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó:")
            print(f"   {e}")
            print("\nüí° –†—ñ—à–µ–Ω–Ω—è:")
            print("   1. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑–º—ñ–Ω–Ω—É: export GEMINI_API_KEY='your-api-key'")
            print("   2. –ê–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: --api-key 'your-api-key'")
            return 1
        
        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
        screenshot_filename = args.screenshot
        if not screenshot_filename:
            if args.verbose:
                print("üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –ø–æ—à—É–∫ —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞...")
            
            screenshot_filename = find_screenshot_automatically(
                args.timestamp, 
                reviewer.screenshots_path
            )
            
            if not screenshot_filename:
                print("‚ùå –°–∫—Ä—ñ–Ω—à–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                print(f"   –®—É–∫–∞–ª–∏ –≤: {reviewer.screenshots_path}")
                print(f"   –û—á—ñ–∫—É–≤–∞–Ω—ñ –Ω–∞–∑–≤–∏: screenshot_{args.timestamp}.png")
                return 1
            
            if args.verbose:
                print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Å–∫—Ä—ñ–Ω—à–æ—Ç: {screenshot_filename}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞
        screenshot_path = reviewer.screenshots_path / screenshot_filename
        if not screenshot_path.exists():
            print("‚ùå –°–∫—Ä—ñ–Ω—à–æ—Ç –Ω–µ —ñ—Å–Ω—É—î:")
            print(f"   {screenshot_path}")
            return 1
        
        # –ó–∞–ø—É—Å–∫ review
        if args.verbose:
            print("\nüöÄ –ó–∞–ø—É—Å–∫ review –ø—Ä–æ—Ü–µ—Å—É...")
        else:
            print_header()
            print(f"–ê–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∏–∑–∞–π–Ω: {args.timestamp}")
            print(f"–°–∫—Ä—ñ–Ω—à–æ—Ç: {screenshot_filename}")
            print("\nü§ñ –û–±—Ä–æ–±–∫–∞ —á–µ—Ä–µ–∑ Gemini Vision API...")
        
        result = reviewer.review_design(args.timestamp, screenshot_filename)
        
        # –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        print_results(result, args.verbose)
        
        # –ö–æ–¥ –≤–∏—Ö–æ–¥—É
        if result.get("status") == "error":
            return 1
        else:
            return 0
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –û–ø–µ—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
        return 1
        
    except Exception as e:
        print(f"\n‚ùå –ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        return 1


def show_help():
    """
    –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É –¥–æ–≤—ñ–¥–∫—É
    """
    print("""
üéØ UXPal Design Review System - –î–æ–≤—ñ–¥–∫–∞

–ü–†–ò–ó–ù–ê–ß–ï–ù–ù–Ø:
–í—ñ–∑—É–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —è–∫–æ—Å—Ç—ñ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏—Ö –¥–∏–∑–∞–π–Ω—ñ–≤ —á–µ—Ä–µ–∑ Gemini Vision API.
–°–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª—ñ–∑—É—î —Å–∫—Ä—ñ–Ω—à–æ—Ç –¥–∏–∑–∞–π–Ω—É —Ç–∞ –Ω–∞–¥–∞—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è.

WORKFLOW:
1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –æ—Å–Ω–æ–≤–Ω–∏–π pipeline (node code.js –∞–±–æ python) 
2. –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π JSON —Å–∫–æ–ø—ñ—é–π—Ç–µ –≤ Figma —Ç–∞ –∑—Ä–æ–±—ñ—Ç—å render
3. –ó—Ä–æ–±—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç —Ç–∞ –∑–±–µ—Ä–µ–∂—ñ—Ç—å —É screenshots/
4. –ó–∞–ø—É—Å—Ç—ñ—Ç—å review: python run_review.py <timestamp> <screenshot>

–§–ê–ô–õ–ò –©–û –°–¢–í–û–†–Æ–Æ–¢–¨–°–Ø:
- stage4_reviewer.txt       - –¥–µ—Ç–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç review
- stage4_reviewer_raw.json  - –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π JSON (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
- stage5_final_engineer.json - —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π JSON –ø—ñ—Å–ª—è JSON Engineer

–ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø:
export GEMINI_API_KEY="your-gemini-api-key"

–ü–†–ò–ö–õ–ê–î–ò:
python run_review.py 20250812_143736 screenshot_20250812_143736.png
python run_review.py 20250812_143736 --verbose
""")


if __name__ == "__main__":
    if len(sys.argv) == 2 and sys.argv[1] in ['--help', '-h', 'help']:
        show_help()
        sys.exit(0)
    
    sys.exit(main())