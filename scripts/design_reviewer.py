#!/usr/bin/env python3
"""
Design Reviewer Module for UXPal
Gemini-based visual analysis and JSON improvement system

–û–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∞ —ñ–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü—ñ—è —â–æ –ø–æ—î–¥–Ω—É—î:
- Gemini Vision API –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É —Å–∫—Ä—ñ–Ω—à–æ—Ç—ñ–≤
- –Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—é –∑ —ñ—Å–Ω—É—é—á–∏–º pipeline (python_outputs structure)  
- –ü—Ä—è–º–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ–∫—Ä–∞—â–µ–Ω–æ–≥–æ JSON (–±–µ–∑ JSON Engineer –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è layout)
"""

import os
import json
import base64
from pathlib import Path
from datetime import datetime
from typing import Dict, Optional, Tuple, List
import google.generativeai as genai

# Load environment variables from .env file
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    # If python-dotenv is not installed, try to load .env manually
    env_path = Path(__file__).parent.parent / '.env'
    if env_path.exists():
        with open(env_path) as f:
            for line in f:
                if line.strip() and not line.startswith('#') and '=' in line:
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value


class DesignReviewer:
    """
    –ì–æ–ª–æ–≤–Ω–∏–π –∫–ª–∞—Å –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ review –¥–∏–∑–∞–π–Ω—ñ–≤ —á–µ—Ä–µ–∑ Gemini Vision API
    """
    
    def __init__(self, api_key: str = None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è reviewer –∑ Gemini API –∫–ª—é—á–µ–º
        """
        self.api_key = api_key or os.getenv('GEMINI_API_KEY')
        if not self.api_key:
            raise ValueError("Gemini API key –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å GEMINI_API_KEY –∑–º—ñ–Ω–Ω—É —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∞–±–æ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä.")
        
        # –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è Gemini
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        
        # –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
        self.base_path = Path("/Users/stipa/UXPal")
        self.python_outputs_path = self.base_path / "python_outputs"
        self.screenshots_path = self.base_path / "screenshots"
        self.reviewer_prompt_path = self.base_path / "src/prompts/roles/reviewer.txt"
        
        print("‚úÖ DesignReviewer —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –∑ Gemini Vision API")
    
    def load_reviewer_prompt(self) -> str:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ reviewer prompt –∑ —Ñ–∞–π–ª—É
        """
        try:
            if self.reviewer_prompt_path.exists():
                return self.reviewer_prompt_path.read_text(encoding='utf-8')
            else:
                print(f"‚ö†Ô∏è Reviewer prompt –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∞–¥—Ä–µ—Å–æ—é: {self.reviewer_prompt_path}")
                return self.get_default_reviewer_prompt()
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è reviewer prompt: {e}")
            return self.get_default_reviewer_prompt()
    
    def get_default_reviewer_prompt(self) -> str:
        """
        –ó–∞–ø–∞—Å–Ω–∏–π reviewer prompt —è–∫—â–æ —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
        """
        return """# Design Reviewer - UXPal Quality Assurance

You are a Senior UX/UI Designer reviewing a rendered interface for visual problems.

## REVIEW CONTEXT
- Original User Request: {USER_REQUEST}
- Analyzer Output: {ANALYZER_OUTPUT}
- Designer Output: {DESIGNER_OUTPUT}

## CRITICAL ISSUES TO CHECK:
1. Content cut off or cropped
2. Navigation bars with gaps from screen edges  
3. Poor text contrast (light gray on white)
4. Oversized containers with floating content
5. Mixed button sizes in same row

## OUTPUT FORMAT:
### If NO visual issues found:
Output only: "DESIGN REVIEW: APPROVED"

### If visual issues found:
Output in this exact format:

# IMPLEMENTATION REPORT

## Review Findings
[Describe issues found]

## Design Decisions  
[Explain corrections]

---

# DESIGN SPECIFICATION

{
  [Your improved JSON here]
}

Focus on fixing real problems visible in the image rather than redesigning working solutions."""
    
    def load_pipeline_context(self, timestamp: str) -> Dict:
        """
        –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç pipeline –∑ timestamp —Ñ–∞–π–ª—ñ–≤ (—Ñ–∞–π–ª–∏ –≤ python_outputs/, –Ω–µ –≤ –ø–∞–ø–∫–∞—Ö)
        """
        context = {}
        
        print(f"üìÅ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –¥–ª—è timestamp: {timestamp}")
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏ –µ—Ç–∞–ø—ñ–≤ pipeline
        try:
            # Stage 1: User Request Analyzer - –ü–û–í–ù–ò–ô output –¥–ª—è ANALYZER_OUTPUT
            analyzer_output_file = self.python_outputs_path / f"alt3_{timestamp}_1_user_request_analyzer_output.txt"
            if analyzer_output_file.exists():
                context['analyzer_output'] = analyzer_output_file.read_text(encoding='utf-8')
                context['user_request'] = self.extract_user_request_from_analyzer(context['analyzer_output'])
                print(f"üìä Stage 1 analyzer output –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(context['analyzer_output'])} —Å–∏–º–≤–æ–ª—ñ–≤")
            
            # Stage 2: UX/UI Designer - –ü–û–í–ù–ò–ô output –¥–ª—è DESIGNER_OUTPUT
            designer_output_file = self.python_outputs_path / f"alt3_{timestamp}_2_ux_ui_designer_output.txt"
            if designer_output_file.exists():
                context['designer_output'] = designer_output_file.read_text(encoding='utf-8')
                print(f"üìä Stage 2 designer output –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(context['designer_output'])} —Å–∏–º–≤–æ–ª—ñ–≤")
            
            # Figma-ready JSON (–≤–∞–ª—ñ–¥–æ–≤–∞–Ω–∏–π —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è)
            figma_ready_file = self.base_path / "figma-ready" / f"figma_ready_{timestamp}.json"
            if figma_ready_file.exists():
                with open(figma_ready_file, 'r', encoding='utf-8') as f:
                    context['current_json'] = json.load(f)
                print(f"üìä Figma-ready JSON –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {figma_ready_file.name}")
            else:
                # Fallback: Stage 3 —è–∫—â–æ figma-ready –Ω–µ —ñ—Å–Ω—É—î
                json_engineer_file = self.python_outputs_path / f"alt3_{timestamp}_3_json_engineer.json"
                if json_engineer_file.exists():
                    with open(json_engineer_file, 'r', encoding='utf-8') as f:
                        json_data = json.load(f)
                        if 'generatedJSON' in json_data:
                            context['current_json'] = json_data['generatedJSON']
                        else:
                            context['current_json'] = json_data
                    print(f"‚ö†Ô∏è Fallback: –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ Stage 3 JSON –∑–∞–º—ñ—Å—Ç—å figma-ready")
            
            print(f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç: analyzer={bool(context.get('analyzer_output'))}, designer={bool(context.get('designer_output'))}, json={bool(context.get('current_json'))}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: {e}")
        
        return context
    
    def extract_user_request_from_analyzer(self, analyzer_output: str) -> str:
        """
        –í–∏—Ç—è–≥–Ω—É—Ç–∏ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π user request –∑ analyzer output
        """
        try:
            # –®—É–∫–∞—î–º–æ —Å–µ–∫—Ü—ñ—é –∑ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–º –∑–∞–ø–∏—Ç–æ–º
            lines = analyzer_output.split('\n')
            for i, line in enumerate(lines):
                if 'user request' in line.lower() or 'original request' in line.lower():
                    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ä—è–¥–æ–∫ –∞–±–æ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤
                    request_lines = []
                    for j in range(i+1, min(i+5, len(lines))):
                        if lines[j].strip() and not lines[j].startswith('#'):
                            request_lines.append(lines[j].strip())
                    return ' '.join(request_lines)
            
            # –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–µ—Ä—à—ñ –∫—ñ–ª—å–∫–∞ —Ä—è–¥–∫—ñ–≤
            return ' '.join(lines[:3])
            
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è user request: {e}")
            return "User request –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    
    def encode_image(self, image_path: Path) -> str:
        """
        –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ base64 –¥–ª—è Gemini
        """
        try:
            with open(image_path, "rb") as f:
                return base64.b64encode(f.read()).decode('utf-8')
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è: {e}")
            raise
    
    def review_design(self, timestamp: str, screenshot_filename: str) -> Dict:
        """
        –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è review –¥–∏–∑–∞–π–Ω—É
        
        Args:
            timestamp: Timestamp –ø–∞–ø–∫–∏ –≤ python_outputs (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "20250812_143736")  
            screenshot_filename: –Ü–º'—è —Ñ–∞–π–ª—É —Å–∫—Ä—ñ–Ω—à–æ—Ç–∞ –≤ –ø–∞–ø—Ü—ñ screenshots
            
        Returns:
            Dict –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ review
        """
        print(f"\nüîç –ü–æ—á–∞—Ç–æ–∫ review –¥–ª—è timestamp: {timestamp}")
        print(f"üì∏ –°–∫—Ä—ñ–Ω—à–æ—Ç: {screenshot_filename}")
        
        # 1. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç pipeline
        context = self.load_pipeline_context(timestamp)
        if not context:
            return {
                "status": "error",
                "message": f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è timestamp: {timestamp}"
            }
        
        # 2. –ó–Ω–∞–π—Ç–∏ —ñ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç
        screenshot_path = self.screenshots_path / screenshot_filename
        if not screenshot_path.exists():
            return {
                "status": "error", 
                "message": f"–°–∫—Ä—ñ–Ω—à–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {screenshot_path}"
            }
        
        # 3. –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ reviewer prompt –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        reviewer_prompt_template = self.load_reviewer_prompt()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ design system data - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π —Ñ–∞–π–ª
        design_system_path = self.base_path / "design-system" / "design-system-raw-data-2025-08-16T14-11-15.json"
        design_system_data = ""
        if design_system_path.exists():
            with open(design_system_path, 'r', encoding='utf-8') as f:
                design_system_data = f.read()
            print(f"üìä Reviewer loaded design system data: {len(design_system_data)} characters")
        else:
            print("‚ö†Ô∏è Design system data –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è reviewer")
            design_system_data = "UXPal Design System - file not found"
        
        # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ –≤—Å—ñ 4 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∑–≥—ñ–¥–Ω–æ –∑ –Ω–æ–≤–æ—é —Å—Ç—Ä—É–∫—Ç—É—Ä–æ—é prompt
        review_prompt = reviewer_prompt_template
        
        # ANALYZER_OUTPUT - Product Requirements (–ø–æ–≤–Ω–∏–π output Stage 1)
        analyzer_output = context.get('analyzer_output', 'Product requirements not found')
        review_prompt = review_prompt.replace('{{ANALYZER_OUTPUT}}', analyzer_output)
        
        # DESIGN_SYSTEM_DATA - Design System (–ø–æ–≤–Ω–∏–π design system)
        review_prompt = review_prompt.replace('{{DESIGN_SYSTEM_DATA}}', design_system_data)
        
        # DESIGNER_OUTPUT - Current JSON (Stage 3 JSON —Ä–µ–∑—É–ª—å—Ç–∞—Ç)
        current_json = context.get('current_json', {})
        current_json_str = json.dumps(current_json, indent=2, ensure_ascii=False)
        review_prompt = review_prompt.replace('{{DESIGNER_OUTPUT}}', current_json_str)
        
        # INTERFACE_IMAGE - –±—É–¥–µ –ø–µ—Ä–µ–¥–∞–Ω–æ —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Gemini API
        review_prompt = review_prompt.replace('{{INTERFACE_IMAGE}}', 'See attached screenshot image')
        
        print(f"üìã –ü—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ prompt –∑ –ø–æ–≤–Ω–∏–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º:")
        print(f"   - ANALYZER_OUTPUT: {len(analyzer_output)} —Å–∏–º–≤–æ–ª—ñ–≤")
        print(f"   - DESIGN_SYSTEM_DATA: {len(design_system_data)} —Å–∏–º–≤–æ–ª—ñ–≤")
        print(f"   - DESIGNER_OUTPUT: {len(current_json_str)} —Å–∏–º–≤–æ–ª—ñ–≤")
        print(f"   - INTERFACE_IMAGE: –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è")
        
        # 4. –í–∏–∫–ª–∏–∫–∞—Ç–∏ Gemini Vision –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        try:
            print("ü§ñ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Gemini Vision API...")
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            with open(screenshot_path, 'rb') as f:
                image_data = f.read()
            
            # –°—Ç–≤–æ—Ä–∏—Ç–∏ Gemini Image –æ–±'—î–∫—Ç
            import PIL.Image
            image = PIL.Image.open(screenshot_path)
            
            # –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–ø–∏—Ç
            response = self.model.generate_content([
                review_prompt,
                image
            ])
            
            review_content = response.text
            print("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ Gemini")
            
        except Exception as e:
            return {
                "status": "error",
                "message": f"–ü–æ–º–∏–ª–∫–∞ Gemini API: {str(e)}"
            }
        
        # 5. –û–±—Ä–æ–±–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        return self.process_review_response(review_content, timestamp, context)
    
    def process_review_response(self, review_content: str, timestamp: str, context: Dict) -> Dict:
        """
        –û–±—Ä–æ–±–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å reviewer —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        """
        # –ó–±–µ—Ä–µ–≥—Ç–∏ –∑–≤—ñ—Ç reviewer
        review_report_path = self.python_outputs_path / f"alt3_{timestamp}_4_design_reviewer.txt"
        review_report_path.write_text(review_content, encoding='utf-8')
        print(f"üìù –ó–≤—ñ—Ç reviewer –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {review_report_path}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è
        if "DESIGN REVIEW: APPROVED" in review_content:
            print("‚úÖ –î–∏–∑–∞–π–Ω —Å—Ö–≤–∞–ª–µ–Ω–æ - –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω—ñ")
            return {
                "status": "approved",
                "message": "–î–∏–∑–∞–π–Ω —Å—Ö–≤–∞–ª–µ–Ω–æ –±–µ–∑ –∑–º—ñ–Ω",
                "report_path": str(review_report_path)
            }
        
        # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω—ñ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è - –≤–∏—Ç—è–≥–Ω—É—Ç–∏ JSON
        if "IMPROVEMENTS MADE" in review_content or "DESIGN SPECIFICATION" in review_content:
            print("üîß –ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è - –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è JSON...")
            
            improved_json = self.extract_json_from_response(review_content)
            if improved_json:
                # –ó–±–µ—Ä–µ–≥—Ç–∏ —Å–∏—Ä–∏–π JSON –≤—ñ–¥ reviewer
                raw_json_path = self.python_outputs_path / f"alt3_{timestamp}_4_design_reviewer_raw.json"
                with open(raw_json_path, 'w', encoding='utf-8') as f:
                    json.dump(improved_json, f, indent=2, ensure_ascii=False)
                
                print(f"üíæ Raw JSON –≤—ñ–¥ reviewer –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {raw_json_path}")
                
                # –ù–û–í–ò–ô –ü–Ü–î–•–Ü–î: –ó–±–µ—Ä–µ–≥—Ç–∏ reviewer JSON –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ figma-ready
                figma_ready_path = self.save_direct_to_figma_ready(improved_json, timestamp)
                
                return {
                    "status": "improved",
                    "message": "–ó–Ω–∞–π–¥–µ–Ω–æ –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è, JSON –æ–Ω–æ–≤–ª–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–ª—è Figma (–±–µ–∑ JSON Engineer)",
                    "report_path": str(review_report_path),
                    "raw_json_path": str(raw_json_path),
                    "figma_ready_path": str(figma_ready_path)
                }
            else:
                return {
                    "status": "error",
                    "message": "–ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ, –∞–ª–µ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏—Ç—è–≥–Ω—É—Ç–∏ JSON",
                    "report_path": str(review_report_path)
                }
        
        # –ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        return {
            "status": "unknown",
            "message": "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ reviewer",
            "report_path": str(review_report_path)
        }
    
    def extract_json_from_response(self, response: str) -> Optional[Dict]:
        """
        –í–∏—Ç—è–≥–Ω—É—Ç–∏ JSON –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Gemini reviewer
        """
        try:
            # –ú–µ—Ç–æ–¥ 1: –®—É–∫–∞—Ç–∏ JSON –±–ª–æ–∫ –≤ markdown
            start_marker = "```json"
            end_marker = "```"
            
            start_idx = response.find(start_marker)
            if start_idx != -1:
                start_idx += len(start_marker)
                end_idx = response.find(end_marker, start_idx)
                if end_idx != -1:
                    json_str = response[start_idx:end_idx].strip()
                    
                    # –û—á–∏—Å—Ç–∏—Ç–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ JavaScript-—Å—Ç–∏–ª—é
                    import re
                    json_str = re.sub(r'//.*$', '', json_str, flags=re.MULTILINE)
                    json_str = re.sub(r'/\*.*?\*/', '', json_str, flags=re.DOTALL)
                    
                    return json.loads(json_str)
            
            # –ú–µ—Ç–æ–¥ 2: –®—É–∫–∞—Ç–∏ JSON –ø—ñ—Å–ª—è "# DESIGN SPECIFICATION"
            spec_marker = "# DESIGN SPECIFICATION"
            spec_idx = response.find(spec_marker)
            if spec_idx != -1:
                # –®—É–∫–∞—Ç–∏ –ø–µ—Ä—à—ñ –¥—É–∂–∫–∏ –ø—ñ—Å–ª—è marker
                start_brace = response.find("{", spec_idx)
                if start_brace != -1:
                    # –ó–Ω–∞–π—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∑–∞–∫—Ä–∏–≤–∞—é—á—É –¥—É–∂–∫—É
                    brace_count = 0
                    for i in range(start_brace, len(response)):
                        if response[i] == '{':
                            brace_count += 1
                        elif response[i] == '}':
                            brace_count -= 1
                            if brace_count == 0:
                                json_str = response[start_brace:i+1]
                                return json.loads(json_str)
            
            print("‚ö†Ô∏è JSON –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ reviewer")
            return None
            
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è JSON: {e}")
            return None
    
    def save_direct_to_figma_ready(self, improved_json: Dict, timestamp: str) -> Path:
        """
        –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–æ–∫—Ä–∞—â–µ–Ω–∏–π JSON –≤—ñ–¥ reviewer –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ figma-ready
        
        –ü–ï–†–ï–í–ê–ì–ò –ü–†–Ø–ú–û–ì–û –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø:
        - –ó–±–µ—Ä—ñ–≥–∞—î —Ä–æ–±–æ—á—É autolayout —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        - –£–Ω–∏–∫–∞—î –ø—Ä–æ–±–ª–µ–º –∑ primaryAxisSizingMode/counterAxisSizingMode
        - –®–≤–∏–¥—à–∏–π workflow (–±–µ–∑ Stage 5)
        - Design Reviewer –¥–æ—Ç—Ä–∏–º—É—î—Ç—å—Å—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó "–Ω–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É"
        """
        print("üìÅ –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è reviewer JSON –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –¥–æ figma-ready...")
        
        # –°—Ç–≤–æ—Ä–∏—Ç–∏ figma-ready –ø–∞–ø–∫—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        figma_ready_dir = self.base_path / "figma-ready"
        figma_ready_dir.mkdir(exist_ok=True)
        
        # –ó–±–µ—Ä–µ–≥—Ç–∏ —è–∫ final_design.json (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –Ω–∞–∑–≤–∞)
        figma_ready_path = figma_ready_dir / "final_design.json"
        with open(figma_ready_path, 'w', encoding='utf-8') as f:
            json.dump(improved_json, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ Reviewer JSON –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–∞–ø—Ä—è–º—É: {figma_ready_path}")
        return figma_ready_path


def main():
    """
    –¢–µ—Å—Ç–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–æ–¥—É–ª—è
    """
    print("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è DesignReviewer –º–æ–¥—É–ª—è...")
    
    try:
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
        reviewer = DesignReviewer()
        
        # –¢–µ—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è prompt
        prompt = reviewer.load_reviewer_prompt()
        print(f"‚úÖ Reviewer prompt –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: {len(prompt)} —Å–∏–º–≤–æ–ª—ñ–≤")
        
        # –¢–µ—Å—Ç –ø–æ—à—É–∫—É timestamp —Ñ–∞–π–ª—ñ–≤
        timestamp_files = list(reviewer.python_outputs_path.glob("*20250812*"))
        print(f"üìÅ –ó–Ω–∞–π–¥–µ–Ω–æ {len(timestamp_files)} timestamp —Ñ–∞–π–ª—ñ–≤ –¥–ª—è 20250812")
        
        if timestamp_files:
            # –í–∏—Ç—è–≥–Ω—É—Ç–∏ timestamp –∑ –ø–µ—Ä—à–æ–≥–æ —Ñ–∞–π–ª—É
            filename = timestamp_files[0].name
            # –ù–∞–ø—Ä–∏–∫–ª–∞–¥: alt3_20250812_143736_1_user_request_analyzer.json -> 20250812_143736
            parts = filename.split('_')
            if len(parts) >= 3:
                timestamp = f"{parts[1]}_{parts[2]}"  # 20250812_143736
                context = reviewer.load_pipeline_context(timestamp)
                print(f"üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –¥–ª—è {timestamp}: {list(context.keys())}")
        
        print("‚úÖ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: {e}")


if __name__ == "__main__":
    main()